// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Countries", testCountries)
	t.Run("Histories", testHistories)
	t.Run("Providers", testProviders)
	t.Run("ProviderCountries", testProviderCountries)
}

func TestDelete(t *testing.T) {
	t.Run("Countries", testCountriesDelete)
	t.Run("Histories", testHistoriesDelete)
	t.Run("Providers", testProvidersDelete)
	t.Run("ProviderCountries", testProviderCountriesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Countries", testCountriesQueryDeleteAll)
	t.Run("Histories", testHistoriesQueryDeleteAll)
	t.Run("Providers", testProvidersQueryDeleteAll)
	t.Run("ProviderCountries", testProviderCountriesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Countries", testCountriesSliceDeleteAll)
	t.Run("Histories", testHistoriesSliceDeleteAll)
	t.Run("Providers", testProvidersSliceDeleteAll)
	t.Run("ProviderCountries", testProviderCountriesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Countries", testCountriesExists)
	t.Run("Histories", testHistoriesExists)
	t.Run("Providers", testProvidersExists)
	t.Run("ProviderCountries", testProviderCountriesExists)
}

func TestFind(t *testing.T) {
	t.Run("Countries", testCountriesFind)
	t.Run("Histories", testHistoriesFind)
	t.Run("Providers", testProvidersFind)
	t.Run("ProviderCountries", testProviderCountriesFind)
}

func TestBind(t *testing.T) {
	t.Run("Countries", testCountriesBind)
	t.Run("Histories", testHistoriesBind)
	t.Run("Providers", testProvidersBind)
	t.Run("ProviderCountries", testProviderCountriesBind)
}

func TestOne(t *testing.T) {
	t.Run("Countries", testCountriesOne)
	t.Run("Histories", testHistoriesOne)
	t.Run("Providers", testProvidersOne)
	t.Run("ProviderCountries", testProviderCountriesOne)
}

func TestAll(t *testing.T) {
	t.Run("Countries", testCountriesAll)
	t.Run("Histories", testHistoriesAll)
	t.Run("Providers", testProvidersAll)
	t.Run("ProviderCountries", testProviderCountriesAll)
}

func TestCount(t *testing.T) {
	t.Run("Countries", testCountriesCount)
	t.Run("Histories", testHistoriesCount)
	t.Run("Providers", testProvidersCount)
	t.Run("ProviderCountries", testProviderCountriesCount)
}

func TestInsert(t *testing.T) {
	t.Run("Countries", testCountriesInsert)
	t.Run("Countries", testCountriesInsertWhitelist)
	t.Run("Histories", testHistoriesInsert)
	t.Run("Histories", testHistoriesInsertWhitelist)
	t.Run("Providers", testProvidersInsert)
	t.Run("Providers", testProvidersInsertWhitelist)
	t.Run("ProviderCountries", testProviderCountriesInsert)
	t.Run("ProviderCountries", testProviderCountriesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Countries", testCountriesReload)
	t.Run("Histories", testHistoriesReload)
	t.Run("Providers", testProvidersReload)
	t.Run("ProviderCountries", testProviderCountriesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Countries", testCountriesReloadAll)
	t.Run("Histories", testHistoriesReloadAll)
	t.Run("Providers", testProvidersReloadAll)
	t.Run("ProviderCountries", testProviderCountriesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Countries", testCountriesSelect)
	t.Run("Histories", testHistoriesSelect)
	t.Run("Providers", testProvidersSelect)
	t.Run("ProviderCountries", testProviderCountriesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Countries", testCountriesUpdate)
	t.Run("Histories", testHistoriesUpdate)
	t.Run("Providers", testProvidersUpdate)
	t.Run("ProviderCountries", testProviderCountriesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Countries", testCountriesSliceUpdateAll)
	t.Run("Histories", testHistoriesSliceUpdateAll)
	t.Run("Providers", testProvidersSliceUpdateAll)
	t.Run("ProviderCountries", testProviderCountriesSliceUpdateAll)
}
