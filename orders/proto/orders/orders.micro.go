// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/orders/orders.proto

package go_micro_srv_orders

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Orders service

type OrdersService interface {
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...client.CallOption) (*PlaceOrderResponse, error)
	MarkOrderAsPaid(ctx context.Context, in *MarkOrderAsPaidRequest, opts ...client.CallOption) (*EmptyMessage, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...client.CallOption) (*GetOrdersResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...client.CallOption) (*GetOrderResponse, error)
}

type ordersService struct {
	c    client.Client
	name string
}

func NewOrdersService(name string, c client.Client) OrdersService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.orders"
	}
	return &ordersService{
		c:    c,
		name: name,
	}
}

func (c *ordersService) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...client.CallOption) (*PlaceOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.PlaceOrder", in)
	out := new(PlaceOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) MarkOrderAsPaid(ctx context.Context, in *MarkOrderAsPaidRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Orders.MarkOrderAsPaid", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...client.CallOption) (*GetOrdersResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.GetOrders", in)
	out := new(GetOrdersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...client.CallOption) (*GetOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.GetOrder", in)
	out := new(GetOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Orders service

type OrdersHandler interface {
	PlaceOrder(context.Context, *PlaceOrderRequest, *PlaceOrderResponse) error
	MarkOrderAsPaid(context.Context, *MarkOrderAsPaidRequest, *EmptyMessage) error
	GetOrders(context.Context, *GetOrdersRequest, *GetOrdersResponse) error
	GetOrder(context.Context, *GetOrderRequest, *GetOrderResponse) error
}

func RegisterOrdersHandler(s server.Server, hdlr OrdersHandler, opts ...server.HandlerOption) error {
	type orders interface {
		PlaceOrder(ctx context.Context, in *PlaceOrderRequest, out *PlaceOrderResponse) error
		MarkOrderAsPaid(ctx context.Context, in *MarkOrderAsPaidRequest, out *EmptyMessage) error
		GetOrders(ctx context.Context, in *GetOrdersRequest, out *GetOrdersResponse) error
		GetOrder(ctx context.Context, in *GetOrderRequest, out *GetOrderResponse) error
	}
	type Orders struct {
		orders
	}
	h := &ordersHandler{hdlr}
	return s.Handle(s.NewHandler(&Orders{h}, opts...))
}

type ordersHandler struct {
	OrdersHandler
}

func (h *ordersHandler) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, out *PlaceOrderResponse) error {
	return h.OrdersHandler.PlaceOrder(ctx, in, out)
}

func (h *ordersHandler) MarkOrderAsPaid(ctx context.Context, in *MarkOrderAsPaidRequest, out *EmptyMessage) error {
	return h.OrdersHandler.MarkOrderAsPaid(ctx, in, out)
}

func (h *ordersHandler) GetOrders(ctx context.Context, in *GetOrdersRequest, out *GetOrdersResponse) error {
	return h.OrdersHandler.GetOrders(ctx, in, out)
}

func (h *ordersHandler) GetOrder(ctx context.Context, in *GetOrderRequest, out *GetOrderResponse) error {
	return h.OrdersHandler.GetOrder(ctx, in, out)
}
