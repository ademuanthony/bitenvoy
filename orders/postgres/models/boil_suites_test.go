// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("OrderModels", testOrderModels)
	t.Run("OrderStatuses", testOrderStatuses)
}

func TestDelete(t *testing.T) {
	t.Run("OrderModels", testOrderModelsDelete)
	t.Run("OrderStatuses", testOrderStatusesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("OrderModels", testOrderModelsQueryDeleteAll)
	t.Run("OrderStatuses", testOrderStatusesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("OrderModels", testOrderModelsSliceDeleteAll)
	t.Run("OrderStatuses", testOrderStatusesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("OrderModels", testOrderModelsExists)
	t.Run("OrderStatuses", testOrderStatusesExists)
}

func TestFind(t *testing.T) {
	t.Run("OrderModels", testOrderModelsFind)
	t.Run("OrderStatuses", testOrderStatusesFind)
}

func TestBind(t *testing.T) {
	t.Run("OrderModels", testOrderModelsBind)
	t.Run("OrderStatuses", testOrderStatusesBind)
}

func TestOne(t *testing.T) {
	t.Run("OrderModels", testOrderModelsOne)
	t.Run("OrderStatuses", testOrderStatusesOne)
}

func TestAll(t *testing.T) {
	t.Run("OrderModels", testOrderModelsAll)
	t.Run("OrderStatuses", testOrderStatusesAll)
}

func TestCount(t *testing.T) {
	t.Run("OrderModels", testOrderModelsCount)
	t.Run("OrderStatuses", testOrderStatusesCount)
}

func TestInsert(t *testing.T) {
	t.Run("OrderModels", testOrderModelsInsert)
	t.Run("OrderModels", testOrderModelsInsertWhitelist)
	t.Run("OrderStatuses", testOrderStatusesInsert)
	t.Run("OrderStatuses", testOrderStatusesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("OrderModels", testOrderModelsReload)
	t.Run("OrderStatuses", testOrderStatusesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("OrderModels", testOrderModelsReloadAll)
	t.Run("OrderStatuses", testOrderStatusesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("OrderModels", testOrderModelsSelect)
	t.Run("OrderStatuses", testOrderStatusesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("OrderModels", testOrderModelsUpdate)
	t.Run("OrderStatuses", testOrderStatusesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("OrderModels", testOrderModelsSliceUpdateAll)
	t.Run("OrderStatuses", testOrderStatusesSliceUpdateAll)
}
