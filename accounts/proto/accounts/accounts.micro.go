// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/accounts/accounts.proto

package go_micro_srv_accounts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Accounts service

type AccountsService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*EmptyMessage, error)
	Disable(ctx context.Context, in *DisableRequest, opts ...client.CallOption) (*EmptyMessage, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Details(ctx context.Context, in *DetailsRequest, opts ...client.CallOption) (*DetailsResponse, error)
	PasswordResetToken(ctx context.Context, in *PasswordResetTokenRequest, opts ...client.CallOption) (*PasswordResetTokenResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*EmptyMessage, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*EmptyMessage, error)
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleRequest, error)
	GetRoles(ctx context.Context, in *EmptyMessage, opts ...client.CallOption) (*GetRolesResponse, error)
	ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...client.CallOption) (*EmptyMessage, error)
}

type accountsService struct {
	c    client.Client
	name string
}

func NewAccountsService(name string, c client.Client) AccountsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.accounts"
	}
	return &accountsService{
		c:    c,
		name: name,
	}
}

func (c *accountsService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Accounts.Update", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) Disable(ctx context.Context, in *DisableRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Accounts.Disable", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) Details(ctx context.Context, in *DetailsRequest, opts ...client.CallOption) (*DetailsResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.Details", in)
	out := new(DetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) PasswordResetToken(ctx context.Context, in *PasswordResetTokenRequest, opts ...client.CallOption) (*PasswordResetTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.PasswordResetToken", in)
	out := new(PasswordResetTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Accounts.ResetPassword", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Accounts.ChangePassword", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleRequest, error) {
	req := c.c.NewRequest(c.name, "Accounts.AddRole", in)
	out := new(AddRoleRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) GetRoles(ctx context.Context, in *EmptyMessage, opts ...client.CallOption) (*GetRolesResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.GetRoles", in)
	out := new(GetRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Accounts.ChangeRole", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accounts service

type AccountsHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Update(context.Context, *UpdateRequest, *EmptyMessage) error
	Disable(context.Context, *DisableRequest, *EmptyMessage) error
	List(context.Context, *ListRequest, *ListResponse) error
	Details(context.Context, *DetailsRequest, *DetailsResponse) error
	PasswordResetToken(context.Context, *PasswordResetTokenRequest, *PasswordResetTokenResponse) error
	ResetPassword(context.Context, *ResetPasswordRequest, *EmptyMessage) error
	ChangePassword(context.Context, *ChangePasswordRequest, *EmptyMessage) error
	AddRole(context.Context, *AddRoleRequest, *AddRoleRequest) error
	GetRoles(context.Context, *EmptyMessage, *GetRolesResponse) error
	ChangeRole(context.Context, *ChangeRoleRequest, *EmptyMessage) error
}

func RegisterAccountsHandler(s server.Server, hdlr AccountsHandler, opts ...server.HandlerOption) error {
	type accounts interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *EmptyMessage) error
		Disable(ctx context.Context, in *DisableRequest, out *EmptyMessage) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Details(ctx context.Context, in *DetailsRequest, out *DetailsResponse) error
		PasswordResetToken(ctx context.Context, in *PasswordResetTokenRequest, out *PasswordResetTokenResponse) error
		ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *EmptyMessage) error
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *EmptyMessage) error
		AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleRequest) error
		GetRoles(ctx context.Context, in *EmptyMessage, out *GetRolesResponse) error
		ChangeRole(ctx context.Context, in *ChangeRoleRequest, out *EmptyMessage) error
	}
	type Accounts struct {
		accounts
	}
	h := &accountsHandler{hdlr}
	return s.Handle(s.NewHandler(&Accounts{h}, opts...))
}

type accountsHandler struct {
	AccountsHandler
}

func (h *accountsHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.AccountsHandler.Create(ctx, in, out)
}

func (h *accountsHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AccountsHandler.Login(ctx, in, out)
}

func (h *accountsHandler) Update(ctx context.Context, in *UpdateRequest, out *EmptyMessage) error {
	return h.AccountsHandler.Update(ctx, in, out)
}

func (h *accountsHandler) Disable(ctx context.Context, in *DisableRequest, out *EmptyMessage) error {
	return h.AccountsHandler.Disable(ctx, in, out)
}

func (h *accountsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.AccountsHandler.List(ctx, in, out)
}

func (h *accountsHandler) Details(ctx context.Context, in *DetailsRequest, out *DetailsResponse) error {
	return h.AccountsHandler.Details(ctx, in, out)
}

func (h *accountsHandler) PasswordResetToken(ctx context.Context, in *PasswordResetTokenRequest, out *PasswordResetTokenResponse) error {
	return h.AccountsHandler.PasswordResetToken(ctx, in, out)
}

func (h *accountsHandler) ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *EmptyMessage) error {
	return h.AccountsHandler.ResetPassword(ctx, in, out)
}

func (h *accountsHandler) ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *EmptyMessage) error {
	return h.AccountsHandler.ChangePassword(ctx, in, out)
}

func (h *accountsHandler) AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleRequest) error {
	return h.AccountsHandler.AddRole(ctx, in, out)
}

func (h *accountsHandler) GetRoles(ctx context.Context, in *EmptyMessage, out *GetRolesResponse) error {
	return h.AccountsHandler.GetRoles(ctx, in, out)
}

func (h *accountsHandler) ChangeRole(ctx context.Context, in *ChangeRoleRequest, out *EmptyMessage) error {
	return h.AccountsHandler.ChangeRole(ctx, in, out)
}
